{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mintusf/CIFAR/blob/master/Encoder_1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r0z41wL5ACnZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yp4unqX2vRuP",
        "colab_type": "code",
        "outputId": "a1808612-0c9f-4f5d-8b78-7f5cfe308814",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "!pip install -U -q PyDrive\n",
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "# Authenticate and create the PyDrive client.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)\n",
        "link = 'https://drive.google.com/open?id=19b0kUvuPGl6U4Cj4VgTfYTc7gK5VgA09'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_X')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1ejj9Qt4Ah9IOSmKnM87-oGe-IytAxM2F'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_Y')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1KzllioQ321D7zAHlmasN-tagGcE6pCnC'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_X')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1m3E519AgJkPbsTNGvEwSHCN6otXNB1Y0'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_Y')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=10mFBsqasbIcrbLrWqqkMyw41OczlcYID'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_X')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1r3zB1bwH6ZjrLZjQftaqHAr-9wGra3Uj'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_Y')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1B3YZrKYnxvAQmC-I6i8vm998qP5izhbA'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_X_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1mxKxn8s1qMCoX9mvBAd-0wCUKQUSVZ2p'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_Y_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1z2TFC3cFLsN7qQcg86ILb2Gv4lXUM19m'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_X_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1TL3GJFCvwxwK5DqqZhTveb_jKmPS0AiK'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_Y_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1Fa_uK2z1fpL6GyRosGQvtFx5eYjz7IdJ'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_X_augmented')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=170pj5QRqB4RlxakUaZZ5PXjD1cAu_ItV'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_Y_augmented')\n",
        "X_train = np.load('Train_X')/255.\n",
        "Y_train_1d = np.load('Train_Y')\n",
        "X_dev = np.load('Dev_X')/255.\n",
        "Y_dev_1d = np.load('Dev_Y')\n",
        "X_test = np.load('Test_X')/255.\n",
        "Y_test_1d = np.load('Test_Y')\n",
        "X_dev_original = np.load('Dev_X_original')/255.\n",
        "Y_dev_original_1d = np.load('Dev_Y_original')\n",
        "X_test_original = np.load('Test_X_original')/255.\n",
        "Y_test_original_1d = np.load('Test_Y_original')\n",
        "X_train_augmented = np.load('Train_X_augmented')/255.\n",
        "Y_train_augmented_1d = np.load('Train_Y_augmented')\n",
        "(X_train_original, Y_train_original), _ = cifar10.load_data()\n",
        "X_train_original = X_train_original/255."
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<p style=\"color: red;\">\n",
              "The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n",
              "We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n",
              "or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n",
              "<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "19b0kUvuPGl6U4Cj4VgTfYTc7gK5VgA09\n",
            "1ejj9Qt4Ah9IOSmKnM87-oGe-IytAxM2F\n",
            "1KzllioQ321D7zAHlmasN-tagGcE6pCnC\n",
            "1m3E519AgJkPbsTNGvEwSHCN6otXNB1Y0\n",
            "10mFBsqasbIcrbLrWqqkMyw41OczlcYID\n",
            "1r3zB1bwH6ZjrLZjQftaqHAr-9wGra3Uj\n",
            "1B3YZrKYnxvAQmC-I6i8vm998qP5izhbA\n",
            "1mxKxn8s1qMCoX9mvBAd-0wCUKQUSVZ2p\n",
            "1z2TFC3cFLsN7qQcg86ILb2Gv4lXUM19m\n",
            "1TL3GJFCvwxwK5DqqZhTveb_jKmPS0AiK\n",
            "1Fa_uK2z1fpL6GyRosGQvtFx5eYjz7IdJ\n",
            "170pj5QRqB4RlxakUaZZ5PXjD1cAu_ItV\n",
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170500096/170498071 [==============================] - 11s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "eea94777-b33d-4945-b404-0ce39fbd65a2",
        "id": "ex_Q0H_pAIy4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        }
      },
      "source": [
        "X_train = np.load('Train_X')/255.\n",
        "Y_train_1d = np.load('Train_Y')\n",
        "X_dev = np.load('Dev_X')/255.\n",
        "Y_dev_1d = np.load('Dev_Y')\n",
        "X_test = np.load('Test_X')/255.\n",
        "Y_test_1d = np.load('Test_Y')\n",
        "X_dev_original = np.load('Dev_X_original')/255.\n",
        "Y_dev_original_1d = np.load('Dev_Y_original')\n",
        "X_test_original = np.load('Test_X_original')/255.\n",
        "Y_test_original_1d = np.load('Test_Y_original')\n",
        "X_train_augmented = np.load('Train_X_augmented')/255.\n",
        "Y_train_augmented_1d = np.load('Train_Y_augmented')\n",
        "(X_train_original, Y_train_original), _ = cifar10.load_data()\n",
        "X_train_original = X_train_original/255.\n",
        "Y_train = np.eye(10)[Y_train_1d.reshape(-1)]\n",
        "print(Y_train.shape)\n",
        "Y_dev = np.eye(10)[Y_dev_1d.reshape(-1)]\n",
        "print(Y_dev.shape)\n",
        "Y_dev_original = np.eye(10)[Y_dev_original_1d.reshape(-1)]\n",
        "print(Y_dev_original.shape)\n",
        "Y_train_augmented = np.eye(10)[Y_train_augmented_1d.reshape(-1)]\n",
        "print(Y_train_augmented.shape)\n",
        "Y_train_original = np.eye(10)[Y_train_original.reshape(-1)]\n",
        "print(Y_train_original.shape)\n",
        "from tensorflow.keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, Dropout,UpSampling2D\n",
        "from tensorflow.keras.models import Model, load_model\n",
        "from tensorflow.keras import regularizers\n",
        "from tensorflow.keras.initializers import glorot_uniform\n",
        "from tensorflow.keras.utils import plot_model\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(42500, 10)\n",
            "(8750, 10)\n",
            "(5000, 10)\n",
            "(50000, 10)\n",
            "(50000, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NzCrrdZjAeo7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def Autoencoder (input_img):\n",
        "\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = MaxPooling2D((2,2))(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = MaxPooling2D((2, 2), padding='same')(x)\n",
        "    x = Conv2D(256, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = MaxPooling2D((2, 2), padding='same')(x)\n",
        "    x = Conv2D(512, (3, 3), activation='relu', padding='same')(x)\n",
        "    encoded = AveragePooling2D((2, 2))(x)\n",
        "\n",
        "    # at this point the representation is (4, 4, 8) i.e. 128-dimensional\n",
        "    x = UpSampling2D((2,2))(encoded)\n",
        "    x = Conv2D(512, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = UpSampling2D((2, 2))(x)\n",
        "    x = Conv2D(256, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = UpSampling2D((2, 2))(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = UpSampling2D((2,2))(x)\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    decoded = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)\n",
        "\n",
        "    return (encoded, decoded)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r8Awu_E-AgXP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b6cfcbe3-febb-4803-e643-650b62efb9cb"
      },
      "source": [
        "\n",
        "with tf.device('/device:GPU:0'):\n",
        "\n",
        "\n",
        "  input_img = Input(shape = (32,32,3))\n",
        "  model_autoenc = Model(input_img,Autoencoder(input_img)[1])\n",
        "\n",
        "\n",
        "  Adam = tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)\n",
        "  model_autoenc.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\n",
        "\n",
        "  model_autoenc.summary()\n",
        "  history = model_autoenc.fit(X_train, X_train, validation_data=(X_dev_original, X_dev_original), epochs = 20, batch_size = 128)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  plt.plot(history.history['acc'])\n",
        "  plt.plot(history.history['val_acc'])\n",
        "  plt.title('Model accuracy')\n",
        "  plt.ylabel('Accuracy')\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.legend(['Train', 'Test'], loc='upper left')\n",
        "  plt.show()\n",
        "\n",
        "  # Plot training & validation loss values\n",
        "  plt.plot(history.history['loss'])\n",
        "  plt.plot(history.history['val_loss'])\n",
        "  plt.title('Model loss')\n",
        "  plt.ylabel('Loss')\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.legend(['Train', 'Test'], loc='upper left')\n",
        "  plt.show()\n",
        "\n",
        "  \"\"\"\n",
        "  for i in idx:\n",
        "      step1 = data[i,:].reshape(3,32,32)\n",
        "      step2 = np.transpose(step1,axes = (1,2,0))\n",
        "      plt.imshow(step2)\n",
        "      plt.show()\n",
        "      print(names[labels[i]])\n",
        "  \"\"\"\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "If using Keras pass *_constraint arguments to layers.\n",
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 32, 32, 3)]       0         \n",
            "_________________________________________________________________\n",
            "conv2d (Conv2D)              (None, 32, 32, 64)        1792      \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 32, 32, 64)        36928     \n",
            "_________________________________________________________________\n",
            "batch_normalization_1 (Batch (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 16, 16, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 16, 16, 128)       73856     \n",
            "_________________________________________________________________\n",
            "batch_normalization_2 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 16, 16, 128)       147584    \n",
            "_________________________________________________________________\n",
            "batch_normalization_3 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 8, 8, 128)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 8, 8, 256)         295168    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 4, 4, 256)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_5 (Conv2D)            (None, 4, 4, 512)         1180160   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 2, 2, 512)         0         \n",
            "_________________________________________________________________\n",
            "up_sampling2d (UpSampling2D) (None, 4, 4, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_6 (Conv2D)            (None, 4, 4, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "up_sampling2d_1 (UpSampling2 (None, 8, 8, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_7 (Conv2D)            (None, 8, 8, 256)         1179904   \n",
            "_________________________________________________________________\n",
            "up_sampling2d_2 (UpSampling2 (None, 16, 16, 256)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_8 (Conv2D)            (None, 16, 16, 128)       295040    \n",
            "_________________________________________________________________\n",
            "batch_normalization_4 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "conv2d_9 (Conv2D)            (None, 16, 16, 128)       147584    \n",
            "_________________________________________________________________\n",
            "batch_normalization_5 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "up_sampling2d_3 (UpSampling2 (None, 32, 32, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_10 (Conv2D)           (None, 32, 32, 64)        73792     \n",
            "_________________________________________________________________\n",
            "batch_normalization_6 (Batch (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "conv2d_11 (Conv2D)           (None, 32, 32, 64)        36928     \n",
            "_________________________________________________________________\n",
            "batch_normalization_7 (Batch (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "conv2d_12 (Conv2D)           (None, 32, 32, 3)         1731      \n",
            "=================================================================\n",
            "Total params: 5,833,347\n",
            "Trainable params: 5,831,811\n",
            "Non-trainable params: 1,536\n",
            "_________________________________________________________________\n",
            "Train on 42500 samples, validate on 5000 samples\n",
            "Epoch 1/20\n",
            "42500/42500 [==============================] - 23s 553us/sample - loss: 0.0217 - acc: 0.5794 - val_loss: 0.0527 - val_acc: 0.2318\n",
            "Epoch 2/20\n",
            "42500/42500 [==============================] - 19s 452us/sample - loss: 0.0108 - acc: 0.6896 - val_loss: 0.0177 - val_acc: 0.6302\n",
            "Epoch 3/20\n",
            "42500/42500 [==============================] - 19s 452us/sample - loss: 0.0085 - acc: 0.7165 - val_loss: 0.0119 - val_acc: 0.6894\n",
            "Epoch 4/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0070 - acc: 0.7342 - val_loss: 0.0173 - val_acc: 0.6425\n",
            "Epoch 5/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0061 - acc: 0.7440 - val_loss: 0.0117 - val_acc: 0.7387\n",
            "Epoch 6/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0053 - acc: 0.7522 - val_loss: 0.0157 - val_acc: 0.5417\n",
            "Epoch 7/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0048 - acc: 0.7587 - val_loss: 0.0102 - val_acc: 0.6779\n",
            "Epoch 8/20\n",
            "42500/42500 [==============================] - 19s 449us/sample - loss: 0.0045 - acc: 0.7638 - val_loss: 0.0164 - val_acc: 0.5801\n",
            "Epoch 9/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0043 - acc: 0.7668 - val_loss: 0.0110 - val_acc: 0.7372\n",
            "Epoch 10/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0040 - acc: 0.7703 - val_loss: 0.0346 - val_acc: 0.4980\n",
            "Epoch 11/20\n",
            "42500/42500 [==============================] - 19s 452us/sample - loss: 0.0039 - acc: 0.7720 - val_loss: 0.0118 - val_acc: 0.6848\n",
            "Epoch 12/20\n",
            "42500/42500 [==============================] - 19s 455us/sample - loss: 0.0036 - acc: 0.7774 - val_loss: 0.0105 - val_acc: 0.6868\n",
            "Epoch 13/20\n",
            "42500/42500 [==============================] - 19s 454us/sample - loss: 0.0035 - acc: 0.7784 - val_loss: 0.0105 - val_acc: 0.6735\n",
            "Epoch 14/20\n",
            "42500/42500 [==============================] - 19s 454us/sample - loss: 0.0034 - acc: 0.7803 - val_loss: 0.0081 - val_acc: 0.6454\n",
            "Epoch 15/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0032 - acc: 0.7852 - val_loss: 0.0072 - val_acc: 0.7704\n",
            "Epoch 16/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0031 - acc: 0.7880 - val_loss: 0.0259 - val_acc: 0.6294\n",
            "Epoch 17/20\n",
            "42500/42500 [==============================] - 19s 449us/sample - loss: 0.0034 - acc: 0.7816 - val_loss: 0.0122 - val_acc: 0.6493\n",
            "Epoch 18/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0030 - acc: 0.7875 - val_loss: 0.0123 - val_acc: 0.7425\n",
            "Epoch 19/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0029 - acc: 0.7866 - val_loss: 0.0084 - val_acc: 0.6255\n",
            "Epoch 20/20\n",
            "42500/42500 [==============================] - 19s 448us/sample - loss: 0.0027 - acc: 0.7936 - val_loss: 0.0070 - val_acc: 0.7749\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N_Zm4PpKAnc0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "outputId": "48d2cd60-22b5-4975-9c25-6700f3d990db"
      },
      "source": [
        "#model_autoenc.save_weights('autoencoder.h5')\n",
        "#model_autoenc.get_weights()[0][1][1]\n",
        "decoded = model_autoenc.predict(np.reshape(X_test[5],(-1,32,32,3)))\n",
        "plt.imshow(X_test[5])\n",
        "plt.show()\n",
        "plt.imshow(decoded[0])"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f4d460c6b38>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD5CAYAAADhukOtAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAdjElEQVR4nO2dbYxc53Xf/2fmzuw7l69aUaQiSqpc\nQ3Ab2SBUt3ZTN0FS1TAgGygM+4OhD0YYFDFaA+kHwQVqF+gHp6hlGGjhgq6FKIXrl8Q2LLRKG1tI\n67ooFFOOTMtWYkk0JZMiuVwu933n7d7TDzNEKeH5n13tyyyj5/8DCM7eM8+9Z557z9yZ5z/nHHN3\nCCHe+tT22gEhxHBQsAuRCQp2ITJBwS5EJijYhcgEBbsQmVBsZ7CZPQTgCwDqAP6Tu382ev70vgmf\nmTnA9sWPQ7ZXgWxYVWVg4+NCP2ppWzQmYuuyZ3S8N7/PyI3opYVzxWzBsarA6ME5i+bR6T4DR0LT\nFs9ZtE82jdFclVVy+/z8ClZXW8k9bjnYzawO4D8A+E0AFwD80MyedPefsTEzMwfw7x/7Z0nbSKPO\nj1VL29Y7LTpmdW2F2trtNrXVAz9Gx5rJ7UWR3g4A6VPSp1vyN6ToRNeiCCQXfhm8+UWBVK/zYzWC\n110U6UvL6ZUNdHo9amt3+DnrdLvUVjrZZzD37sGNwvkZDW8w0RsSvZvxD94ri+lr//OPfYeO2c7H\n+AcBvOTu59y9A+BrAB7exv6EELvIdoL9GIBf3vT3hcE2IcQtyK4v0JnZKTM7Y2ZnFhdXd/twQgjC\ndoL9IoA7b/r7+GDb63D30+5+0t1PTk9PbONwQojtsJ1g/yGA+8zsbjNrAvgIgCd3xi0hxE6z5dV4\nd++Z2ScA/A/0pbfH3f2n0ZiqrLC2upbe3xhfBa/X07Zem38t6JXr3Fbx1VtUfLW4R1Z93bkqUNb4\n+2kvWo0PaBB1AgBqlj4emcKBka8U14jcCABFsM/C0q/NiX8A0ENwXqzDTcbHFZZePY/mIxZSuf9l\ndO/sBavxZI6r4Nopy/RrrgXqybZ0dnd/CsBT29mHEGI46Bd0QmSCgl2ITFCwC5EJCnYhMkHBLkQm\nbGs1/s3iqNCp0pJYrcPfd8ZG025GUk3/5/qEWpCwEGSgdEhShVVcxymDZIaSZC4BQD14G2aJQQBQ\nkPfvreXlAVWUuBJImD1P++jB/aXV4Ykw60EiTK/H/ajV0uezCOTGSJarB1JkLZgrFNxWkiSZXi+Q\no7dwm9adXYhMULALkQkKdiEyQcEuRCYo2IXIhKGuxsMMtTpZWQ/K9nSr9CptRZIB+vvjtipYRS6D\nBdUeNQbJHVGdvGA1vhGs3taD01YRXzwopxSpAmVUsip43fXaSHJ7O8h1WVzlCspqUEosKjE1lnYD\nY+N8pbsZlP2qBdk/0XxYkNTC/K96/HWVYMpFkNTEPRBCvJVQsAuRCQp2ITJBwS5EJijYhcgEBbsQ\nmTBU6c3MUG+QQwYyGu3QESS01IwnVZRBAk1VcRnKiKrhUd26oLNL1KXFggQalmQCACCJGl7y+egF\nEk+3G3RAKbmP3d5ocvtrc+kahABw8fIita0uc1lubJTPx4m7Dya3zxQNOqbGTjSAIgiZfpMkYgta\nAzlJU/JAPu6SmIjaU+nOLkQmKNiFyAQFuxCZoGAXIhMU7EJkgoJdiEzYlvRmZucBLAMoAfTc/WT4\nfBgKkvUG0i4I6PeWSu+Pj4nqknWdZ1A5Ao2EyGHBiDCzzWjmEtBg8wSg2WhSW53UQetFUiSprQcA\ny20u5Swt8flfuJ6W0X7+8jU65upVLst5m9+XJqdJahuAA7dNJbcf3B9kqAXXR63LJbtmULwuSDpE\nl1xX7UCabRNNtwqyLHdCZ/+H7j63A/sRQuwi+hgvRCZsN9gdwJ+a2bNmdmonHBJC7A7b/Rj/Xne/\naGa3Afiumf2lu3//5icM3gROAcCRI9PbPJwQYqts687u7hcH/88C+DaABxPPOe3uJ9395PS+ie0c\nTgixDbYc7GY2YWZTNx4D+C0Az++UY0KInWU7H+NnAHzb+sX5CgD/xd3/ezjCDEWRzoaqBZljrfV0\ny6jZ+WU6Zn6ZZ1D16oHMNxIUG2ymbUXwljnW5MZ943z6J8bT8wQANSpGAivraclxPsgam7+enl8A\nuDrbora5OT5uhahovR6Xrm6/4xi1jY/yT4WddiDZ+Xhyey1o41R2g9cV2BpN/tqqoHDnaittWwuy\nEddX09vLIGtzy8Hu7ucA/OpWxwshhoukNyEyQcEuRCYo2IXIBAW7EJmgYBciE4bb6w0GkKysdptn\nXl2eX0hu//nLr9ExC4tL3A2eJIWRMT4loxNp2/79fIdjB9PSDwC0gmKO87NcOlxa5vLPwkJaKlu6\nzjO51ta4H22u2KHW4K/7zntuS24/cfwePuZXTlDbyiK/Pv7kqf9JbS+/eCG5vVE7RMccORhkUwYZ\ngqvzXAIsg7S3Ti9tK0susVbEFhVM1Z1diExQsAuRCQp2ITJBwS5EJijYhciEoa7GV1WFtdX0SvLK\nOk9qmZ1L25ZX+Kp01NIoeotrBIkrRlrrlEFrpfnlFWorS+5jp8NtweFQL9Jqx/ThMTpmX8VXfcvg\nEhkb3Udtx47fnd4+cxcdMz6arhcHANfmee26v3zxFWqbv3A5uf3iK/vpmL/z926ntgOH+XxcX+Kr\n8Z0eP2kFaYlWK/g5a9Z4ZUaG7uxCZIKCXYhMULALkQkKdiEyQcEuRCYo2IXIhKFLb6uddELGWotL\nE12SMNJs8JpfVuM1v2pNbhsP6sKNkySZWvCW2e1EbZe4H82Cy2HNIFmHSS/8SIBXfH+l8WSXemOS\n25rpfa51eE27VpDEsUwkWwDotPk+2+10Tb6rV3mi1PwKL3l+9MRRapswfiFUq9zHBmnn1RwJpLd6\n+rzU6twH3dmFyAQFuxCZoGAXIhMU7EJkgoJdiExQsAuRCRtKb2b2OIAPAJh193cMth0E8HUAJwCc\nB/Bhd7++8eEMFcmwMg8kr9F0HbfOJJd+ehWXOmpNnlHWGOVZQyyjzANhy4O2VnULbJGEUufjmKUk\ntf/iUUBZ8tfWXud17SrSmqvspmUmAKiN8BZPV2Znqa0ZyKzjB9JttKaP8PZaI2N87j04Z2NBy65e\nIMuxa7/R5LJng0hvFhxnM3f2PwDw0Bu2PQrgaXe/D8DTg7+FELcwGwb7oN/6/Bs2PwzgicHjJwB8\ncIf9EkLsMFv9zj7j7pcGjy+j39FVCHELs+0FOnd3BL/GNLNTZnbGzM4sL/NKHkKI3WWrwX7FzI4C\nwOB/unri7qfd/aS7n5ya4g0ThBC7y1aD/UkAjwwePwLgOzvjjhBit9iM9PZVAO8DcNjMLgD4NIDP\nAviGmX0cwCsAPry5wxlq5JBFwSWZqYl0IUJHOqMJALplIJ/U+bhanWdeVVX620qnG2S2BdJVnSft\nUZkPAIJOQjCSglcznkXXCy6DVof7sbjGe0MVrdXk9qVl/qJ7bd7y6trldOFIADh2Dy8eee9Uus3T\n4eM8o+zIQS55ecGvnQL8Gh51fj32euk5rgJJtEsyBD3IpNww2N39o8T0GxuNFULcOugXdEJkgoJd\niExQsAuRCQp2ITJBwS5EJgy14CRgMHLIeiBbMFlufIT/SKfXCyQ02icLcHAZbb1Myy6tVX6sXtCY\nrTnC32sL4xJK0MUOIBlx0Zhuhx9rbYlnD15f4K+7Q+a/bPHed92gKOP+2/ml+rfewYtAjh9On+vG\neNBLr+TZfM4vHXjQu6/eCAYibfPgXhxJbAzd2YXIBAW7EJmgYBciExTsQmSCgl2ITFCwC5EJQ5Xe\nvHK0W2l5otPlskWPSENll8sZ9RqX8pp1Pq50nsnVJn70WoFMFmSoRW+1VTcoYhnIcqxtWxVINd4O\nbIEfzaCY5vpCeh5fu3KNjikD6erut3F57eCRIKOvSGffGZFRAcAQSKlBPzonWZEAUAUFP1l2mwdZ\nb0bqxUSCnO7sQmSCgl2ITFCwC5EJCnYhMkHBLkQmDHU1vqoca+tkNb7NE0ZarfTKadnmK6ojo3yF\ndnw8eNlRmx6y2lpznjhRC1ZU64GtFtTQQxm0ciKr7hYcK8qSmSp4PbYjv3KQ2l4jdf7O/4K3cYpW\n45tBKyS3dWrrrBHbKD9WFUx9pxcYe0EiTLDCDyd1+aL2YFu4T+vOLkQmKNiFyAQFuxCZoGAXIhMU\n7EJkgoJdiEzYTPunxwF8AMCsu79jsO0zAH4bwNXB0z7l7k9tfDgDPH1Ir3hbIO+lba0ud7/X47Jc\nGSRwsPZJANBupeW8unNZqCi4BNiscTmmCBJXjLQLAgAj+7Sontk696MGXufv3rveRm1HDqX9P/MX\n5+iYlaVlalsgiTUA0Bjjsu1aJy2L9taD6yOoGxjka6FOrm0AaAYSZrM5kdxujSB5hhTDi2rTbebO\n/gcAHkps/7y7PzD4t4lAF0LsJRsGu7t/H8D8EHwRQuwi2/nO/gkzO2tmj5vZgR3zSAixK2w12L8I\n4F4ADwC4BOBz7IlmdsrMzpjZmZXVdCEBIcTus6Vgd/cr7l66ewXgSwAeDJ572t1PuvvJyYn0QoQQ\nYvfZUrCb2c01gj4E4PmdcUcIsVtsRnr7KoD3AThsZhcAfBrA+8zsAfRLXp0H8DubOZhZDY16WoIo\ng+44zZG0NNQtucywHrQZWrnGZZdeFUgyRM4rGvw9szkRyHJBLbmac/kHgTRkpO1SvcZlnF6H+7+0\nzCUvVLzO3/Hjx5Pbpw/x5Z0rly5R26sXr1Jbo8H9aHv6nLXLIFMukm0D6a1WBTJrg5+zBsnAK+pc\njq6R+3TZ48fZMNjd/aOJzV/eaJwQ4tZCv6ATIhMU7EJkgoJdiExQsAuRCQp2ITJhqAUnAYNZWk6o\nBVUPa5Z2syAyHgB4xYtArqy1qK3d4bILSOufRoNLaL0ul0JG21wOG+VqEoo6P97USPr92+qjdMxa\ni2e9/fLKIrXdPcd/Efn2t9+e3P4P/v576JilRd4aqrPOz9n163yOm+OkdVhU/zHIKqwCubcksicA\nVG0uYZZkn/UoK5JkU243600I8RZAwS5EJijYhcgEBbsQmaBgFyITFOxCZMKQpTcAzt5fgoKITqQQ\nui8gemkOnk3UKPg+C1I0sG5c+lleXqC2hUUux4xwVRFjY1xeaR5OS2wjDV44cu7qHLW9eolXJOt2\neZbXkcMzye0f+Efvo2MOH+F649lzP6K2apX76JbOfrSgcmTUR61ZBD3zmsG1Uwt6D06l6zyMjvFz\nVpA+cFGBU93ZhcgEBbsQmaBgFyITFOxCZIKCXYhMGOpqvLujS1ZByyAzoUcWTj1KZghW6guSWAMA\nI+N8RXhyMr1EXoEnz6x3eALHWtDSqBskTnSD9lUHJtL+t7p8sl79JU9AWVniCUVFg6/8Gklsmhjh\nvt9/333U1iz4PF547QVqW1lNKxdFK0hoQdAOK1jtrgfXVWOEJyId3H8wuX16coyO6bXT11yz4D7o\nzi5EJijYhcgEBbsQmaBgFyITFOxCZIKCXYhM2Ez7pzsB/CGAGfTbPZ129y+Y2UEAXwdwAv0WUB92\n9+vRvrxydIlk0Alqv5Wk505Zcfmk6nKbBZrd2CiXO6YnSGJC0Fqp2+bSVa/NE2jW17it7PLjuacl\nntcuLtExs3O8zlxlXGoaG+dyUreblso6gRRZYGv10xrB/Bf19CU+2gyK/AXSW73BQ6ZeCxKsghZV\nUyPpcZMj/FrsIH1easZnajN39h6A33P3+wG8G8Dvmtn9AB4F8LS73wfg6cHfQohblA2D3d0vufuP\nBo+XAbwA4BiAhwE8MXjaEwA+uFtOCiG2z5v6zm5mJwC8E8AzAGbc/Ubbzcvof8wXQtyibDrYzWwS\nwDcBfNLdX/cF0PvFqpNfuMzslJmdMbMzq6u8zrgQYnfZVLBbv7PDNwF8xd2/Ndh8xcyODuxHAcym\nxrr7aXc/6e4nJybSFTmEELvPhsFuZoZ+P/YX3P2xm0xPAnhk8PgRAN/ZefeEEDvFZrLe3gPgYwB+\nYmbPDbZ9CsBnAXzDzD4O4BUAH95oR1XlaK2tJ23dkktUXqZluW4g13WI9AMANa7wYN8Yl5P2T08m\nt9cb/D1zdJzLMUXBbXOXghZP+7mPt992LLn9xZefp2NWVvlcTe4/RG1jQSbXeit9PteCr3LnX3mF\n2p59/qfUthLU0BsfT8u2U1NBnbmRILOtwc9ZjbQ2A2K5tLuSnqt2kEXXI9KyB3L0hsHu7j8AwDz9\njY3GCyFuDfQLOiEyQcEuRCYo2IXIBAW7EJmgYBciE4ZbcLIqsb6ynLSVFS+wCE9ngK2tc7muvbZG\nbfuCQn4H9++jtkPTaVtUhHB63zS1TY0Ffkzw/k8zR9MFCgHgyB13Jbc/98JFOqYRZFcdPnSE2saa\n3Me5uXQRyx8//1xyOwD8t+/9L2p77fwFaovab91+x1Ry+/1/8wAdcyA4LyMN/pqLYD7KHpfeKpJk\nt7KYlqkBoLWelp17JEMU0J1diGxQsAuRCQp2ITJBwS5EJijYhcgEBbsQmTD0Xm+9Hslga63Qce12\nWkZbDrK16qSIHwAcmEpnrwHA/kmec98gWWplUCixHhQAbDZ51piD+9/qBf28RtKv7bZj6Ww4ADgy\nc4Xajh27jdq6QYbVi3/1UnL7n3zv//AxZ1+mth64vBYkHWJqMS2HrSxzierQBJfJak1uG3F+XiyQ\n7EpSAHVllcvHLZIp5+XWinYKId5CKNiFyAQFuxCZoGAXIhMU7EJkwlBX480MzWY6aWR9ha+sz19P\nd5Vaa/EadCfuOk5tt83wumoWrKyvraXrp/WCVWmr8ffTTrBy+uos76T1i9kFaps4kE5cORKsxt8+\nw5NM5uf5sX7wv/8vta2upFtKvfriq3RMlMQR1fkrCm7r9dJzPDfHk0yagYIyvcrP2fgEt42OcVtz\nNB2GRZ23jBpvpq/9mgVKArUIId5SKNiFyAQFuxCZoGAXIhMU7EJkgoJdiEzYUHozszsB/CH6LZkd\nwGl3/4KZfQbAbwO4Onjqp9z9qWhftZphbDQtJ1wjCTIAML+Yln/Kkr9XNRpcgvCSFP0CsLC4RG3s\nrbHZ5NPYGOXJLiNB+6R9U7x23aVLXA67Pp+WvMab43TMaJA0dO7cz6lt9jKX7EASV1otLnkVgbzW\naAYttoicCwBGElfW1nlizfx1LgPD+bECBRao+LhmkfZxtMGvjwbJ16rXA4mSWv4/PQC/5+4/MrMp\nAM+a2XcHts+7+7/bxD6EEHvMZnq9XQJwafB42cxeAMB/oSGEuCV5U9/ZzewEgHcCeGaw6RNmdtbM\nHjczXptXCLHnbDrYzWwSwDcBfNLdlwB8EcC9AB5A/87/OTLulJmdMbMzq0EtdyHE7rKpYDezBvqB\n/hV3/xYAuPsVdy/dvQLwJQAPpsa6+2l3P+nuJyfG+SKREGJ32TDYzcwAfBnAC+7+2E3bj970tA8B\neH7n3RNC7BSbWY1/D4CPAfiJmd3o3fMpAB81swfQl+POA/idjXZUVRXarfRH+YUVXoNucSUt1xQN\n7v5qsL+Lly9Rm5dckpk8kG4lFNW0CxKoUPb4sZzUJQOA5fV0Cy0A+MW5dJunIpCnOm0+V2NjPPOq\n8iBLjWT7NcfScwgARVDfbXSU+z8SyHI14kcjyA6L2lrtn+b+H9rP5dJJktkGAE3if9HgbaicyL31\nGp+nzazG/wBAamZCTV0IcWuhX9AJkQkKdiEyQcEuRCYo2IXIBAW7EJkw1IKTvbKHK9fmkraFJS4n\nMaYmueTVHOcZQ6ur/FjLK+mikgDQI3LYSJNnjXEBDZhvXaO2S0FG2cK1q9TWIm20ihpPyaqCIptv\nv48X7pzexyWqgkz/6GggkzW4bIRA5quCjMm15U56d6QQJQAcPsBbgN1xgMtr+/ZxmbJR8FBj/nsg\nD1a19DWngpNCCAW7ELmgYBciExTsQmSCgl2ITFCwC5EJQ5XeyrLE4lK6IGJZBVlI42kpZObQYTpm\nepr3c1u4Pk9ta2tpqQYAas20ZFeM8WksRricNBf0c5ubS0uUANDuBvLgYjpDsB4U4Lx9hs/j2952\nlNoOB1LTSIPJlHyuYumN+x8kKmJ9PS1rWVAccmqSy7aTUfZdUOyxFzjZbqX32S3bdEzN2QvgL0x3\ndiEyQcEuRCYo2IXIBAW7EJmgYBciExTsQmTCUKW3fsFJkoUUpIexXlhlICf1qDQBrLe5pLEY9CJr\nzbPsJJ6R1WzwjLgF0sMOiPvRTYzybDPW62tkjI+54zDPHtzHVSg0jfs4QmS00aBIaIMUhwQABNlc\nXudy2ESRlgeLGt9fEUho9eBCrWFrxR47lr4ei24g5TXY9a2sNyGyR8EuRCYo2IXIBAW7EJmgYBci\nEzZcjTezUQDfBzAyeP4fu/unzexuAF8DcAjAswA+5u48iwT91fiVlXT7p047SkAhiQIkyQEAVpZ5\nS6NOiycl9LrcVqulV2I9eM8cGeXJIgfrB6ltiiT/APHqf52sdo8HNfkO7Oc2CxIrotp1vSrtY7fk\nq8UAVy4KUnMNADxIknFSBbAKEmHCVfU6VzUQtF7qtHkH49Yau664agQ2j4EKtZk7exvAr7v7r6Lf\nnvkhM3s3gN8H8Hl3/xsArgP4+Cb2JYTYIzYMdu9z4zbZGPxzAL8O4I8H258A8MFd8VAIsSNstj97\nfdDBdRbAdwG8DGDB3W985r0A4NjuuCiE2Ak2FezuXrr7AwCOA3gQwNs3ewAzO2VmZ8zsTCf4PiyE\n2F3e1Gq8uy8A+DMAfxfAfjO7sRp0HECyMbi7n3b3k+5+shn8VFIIsbtsGOxmdsTM9g8ejwH4TQAv\noB/0/2TwtEcAfGe3nBRCbJ/N3GqPAnjCzOrovzl8w93/q5n9DMDXzOzfAPgLAF/eaEcOoEtkoypo\nT2QkKWRtlddiu77IX5qDS3bjY0FdNZKAMjExTsdMTU9RW6POX3MdXF6rBU2lnCRx1KMzHSS0dDo8\nMcgrPq5Xpv3oBZ/u6oGTjTqX3qLkD5ZQVNSCCRnhUqRb4EfJz+dqi1+rS+20TFwPpE0jiUFVIL1t\nGOzufhbAOxPbz6H//V0I8dcA/YJOiExQsAuRCQp2ITJBwS5EJijYhcgE82CpfscPZnYVwCuDPw8D\n4D2Ohof8eD3y4/X8dfPjLnc/kjIMNdhfd2CzM+5+ck8OLj/kR4Z+6GO8EJmgYBciE/Yy2E/v4bFv\nRn68Hvnxet4yfuzZd3YhxHDRx3ghMmFPgt3MHjKzvzKzl8zs0b3wYeDHeTP7iZk9Z2Znhnjcx81s\n1syev2nbQTP7rpm9OPj/wB758RkzuziYk+fM7P1D8ONOM/szM/uZmf3UzP75YPtQ5yTwY6hzYmaj\nZvbnZvbjgR//erD9bjN7ZhA3XzcznqKZwt2H+g9AHf2yVvcAaAL4MYD7h+3HwJfzAA7vwXF/DcC7\nADx/07Z/C+DRweNHAfz+HvnxGQD/YsjzcRTAuwaPpwD8HMD9w56TwI+hzgn6ObuTg8cNAM8AeDeA\nbwD4yGD7fwTwT9/Mfvfizv4ggJfc/Zz3S09/DcDDe+DHnuHu3wcw/4bND6NfuBMYUgFP4sfQcfdL\n7v6jweNl9IujHMOQ5yTwY6h4nx0v8roXwX4MwC9v+nsvi1U6gD81s2fN7NQe+XCDGXe/NHh8GcDM\nHvryCTM7O/iYv+tfJ27GzE6gXz/hGezhnLzBD2DIc7IbRV5zX6B7r7u/C8A/BvC7ZvZre+0Q0H9n\nB4IyJbvLFwHci36PgEsAPjesA5vZJIBvAvikuy/dbBvmnCT8GPqc+DaKvDL2ItgvArjzpr9pscrd\nxt0vDv6fBfBt7G3lnStmdhQABv/P7oUT7n5lcKFVAL6EIc2JmTXQD7CvuPu3BpuHPicpP/ZqTgbH\nftNFXhl7Eew/BHDfYGWxCeAjAJ4cthNmNmFmUzceA/gtAM/Ho3aVJ9Ev3AnsYQHPG8E14EMYwpxY\nv6DalwG84O6P3WQa6pwwP4Y9J7tW5HVYK4xvWG18P/ornS8D+Jd75MM96CsBPwbw02H6AeCr6H8c\n7KL/3evj6PfMexrAiwC+B+DgHvnxnwH8BMBZ9IPt6BD8eC/6H9HPAnhu8O/9w56TwI+hzgmAv41+\nEdez6L+x/Kubrtk/B/ASgD8CMPJm9qtf0AmRCbkv0AmRDQp2ITJBwS5EJijYhcgEBbsQmaBgFyIT\nFOxCZIKCXYhM+H/y0lK7PbW5fQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v1QOISGnEXJC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from __future__ import print_function\n",
        "with tf.device('/device:GPU:0'):\n",
        "  \n",
        "  from tensorflow.keras.datasets import cifar10\n",
        "  from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "  from tensorflow.keras.models import Sequential\n",
        "  from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\n",
        "  from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n",
        "  from tensorflow.keras import optimizers\n",
        "  import numpy as np\n",
        "  #from tensorflow.keras.layers.core import Lambda\n",
        "  from tensorflow.keras import backend as K\n",
        "  from tensorflow.keras import regularizers\n",
        "\n",
        "  class cifar10vgg:\n",
        "      def __init__(self,learning_rate,x_train,y_train,train=True):\n",
        "          self.num_classes = 10\n",
        "          self.weight_decay = 0\n",
        "          self.x_shape = [32,32,3]\n",
        "          encoded = Autoencoder(input_img)[0] #using encoder\n",
        "          self.model = Model(input_img,self.build_model(encoded))\n",
        "          for l1,l2 in zip(self.model.layers[:15],model_autoenc.layers[:15]):#getting weights from encoder\n",
        "            l1.set_weights(l2.get_weights())\n",
        "          #print(model_autoenc.get_weights()[0][1][1])\n",
        "          #print(self.model.get_weights()[0][1][1])\n",
        "          for layer in self.model.layers[0:15]:\n",
        "            layer.trainable = False\n",
        "          if train:\n",
        "              self.model.summary()\n",
        "              self.model = self.train(self.model,learning_rate,x_train,y_train)\n",
        "          else:\n",
        "              self.model.load_weights('cifar10vgg.h5')\n",
        "\n",
        "\n",
        "      def build_model(self,encoded):\n",
        "          # Build the network of vgg for 10 classes with massive dropout and weight decay as described in the paper.\n",
        "\n",
        "          weight_decay = self.weight_decay\n",
        "\n",
        "          #X = Conv2D(64, (3, 3), padding='same',\n",
        "          #                input_shape=self.x_shape,kernel_regularizer=regularizers.l2(weight_decay))(encoded)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = Conv2D(64, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "          #X = Conv2D(128, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)  \n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = Conv2D(128, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "          #X = Conv2D(256, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)      \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(256, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)    \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)     \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)     \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          X = Conv2D(1024,(1,1),padding = 'same',kernel_regularizer=regularizers.l2(weight_decay))(encoded)\n",
        "          #X = Dropout(0.4)(X)\n",
        "\n",
        "          X = Flatten()(X)\n",
        "          X = Dense(1024,kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          X = BatchNormalization()(X)\n",
        "          X = Activation('relu')(X)  \n",
        "          #X = Dropout(0.4)(X)\n",
        "\n",
        "          X = Dense(1024,kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          X = BatchNormalization()(X)\n",
        "          X = Activation('relu')(X)  \n",
        "          #X = Dropout(0.4)(X)\n",
        "\n",
        "          X = Dense(self.num_classes)(X)\n",
        "          X = Activation('softmax')(X)\n",
        "          \n",
        "          return X\n",
        "\n",
        "\n",
        "      def normalize(self,X_train,X_test):\n",
        "          #this function normalize inputs for zero mean and unit variance\n",
        "          # it is used when training a model.\n",
        "          # Input: training set and test set\n",
        "          # Output: normalized training set and test set according to the trianing set statistics.\n",
        "          mean = np.mean(X_train,axis=(0,1,2,3))\n",
        "          std = np.std(X_train, axis=(0, 1, 2, 3))\n",
        "          X_train = (X_train-mean)/(std+1e-7)\n",
        "          X_test = (X_test-mean)/(std+1e-7)\n",
        "          return X_train, X_test\n",
        "\n",
        "      def normalize_production(self,x):\n",
        "          #this function is used to normalize instances in production according to saved training set statistics\n",
        "          # Input: X - a training set\n",
        "          # Output X - a normalized training set according to normalization constants.\n",
        "\n",
        "          #these values produced during first training and are general for the standard cifar10 training set normalization\n",
        "          mean = 120.707\n",
        "          std = 64.15\n",
        "          return (x-mean)/(std+1e-7)\n",
        "          \n",
        "\n",
        "      def predict(self,x,normalize=True,batch_size=50):\n",
        "          if normalize:\n",
        "              x = self.normalize_production(x)\n",
        "          return self.model.predict(x,batch_size)\n",
        "\n",
        "      def train(self,model_classifier,learning_rate,x_train,y_train):\n",
        "\n",
        "          #training parameters\n",
        "          batch_size = 128\n",
        "          maxepoches = 50\n",
        "          learning_rate = learning_rate\n",
        "          lr_decay = 1e-5\n",
        "          lr_decay = 0\n",
        "          lr_drop = 20\n",
        "          # The data, shuffled and split between train and test sets:\n",
        "          #(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n",
        "          #x_train = x_train.astype('float32')\n",
        "          #x_test = x_test.astype('float32')\n",
        "          #x_train, x_test = self.normalize(x_train, x_test)\n",
        "\n",
        "          #y_train = tf.keras.utils.to_categorical(y_train, self.num_classes)\n",
        "          #y_test = tf.keras.utils.to_categorical(y_test, self.num_classes)\n",
        "\n",
        "          def lr_scheduler(epoch):\n",
        "              return learning_rate * (0.5 ** (epoch // lr_drop))\n",
        "          reduce_lr = tf.keras.callbacks.LearningRateScheduler(lr_scheduler)\n",
        "\n",
        "          #data augmentation\n",
        "          datagen = ImageDataGenerator(\n",
        "              featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "              samplewise_center=False,  # set each sample mean to 0\n",
        "              featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "              samplewise_std_normalization=False,  # divide each input by its std\n",
        "              zca_whitening=False,  # apply ZCA whitening\n",
        "              rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "              width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n",
        "              height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n",
        "              zoom_range=0.1,\n",
        "              shear_range=0.1,\n",
        "              horizontal_flip=True,  # randomly flip images\n",
        "              vertical_flip=False)  # randomly flip images\n",
        "          # (std, mean, and principal components if ZCA whitening is applied).\n",
        "          datagen.fit(x_train)\n",
        "\n",
        "\n",
        "\n",
        "          #optimization details\n",
        "          sgd = optimizers.SGD(lr=learning_rate, decay=lr_decay, momentum=0.9, nesterov=True)\n",
        "\n",
        "          mask = np.array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])\n",
        "          mask = np.reshape(mask,(10,1))\n",
        "          def customLoss(yTrue,yPred):\n",
        "            print(yTrue.shape)\n",
        "            return K.categorical_crossentropy(mask*yTrue, yPred, from_logits=False, axis=-1)\n",
        "          #model.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])\n",
        "          model_classifier.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])\n",
        "\n",
        "          # training process in a for loop with learning rate drop every 25 epoches.\n",
        "\n",
        "          class_weight = {0: 1.,1: 1.,2: 2.,3: 2.,4: 2.,5: 1.,6: 1.,7: 1.,8: 1.,9: 1.}\n",
        "\n",
        "          history = model_classifier.fit_generator(datagen.flow(x_train, y_train,\n",
        "                                          batch_size=batch_size),\n",
        "                              steps_per_epoch=x_train.shape[0] // batch_size,\n",
        "                              epochs=maxepoches,\n",
        "                              validation_data=(x_test, y_test),verbose=1,class_weight = class_weight)\n",
        "          \n",
        "          #history = model_classifier.fit(x_train,y_train, batch_size=batch_size,epochs=maxepoches,validation_data=(x_test, y_test),verbose=1,class_weight = class_weight)\n",
        "\n",
        "          model_classifier.save_weights('cifar10vgg.h5')\n",
        "          \n",
        "          plt.plot(history.history['acc'])\n",
        "          plt.plot(history.history['val_acc'])\n",
        "          plt.title('Model accuracy')\n",
        "          plt.ylabel('Accuracy')\n",
        "          plt.xlabel('Epoch')\n",
        "          plt.legend(['Train', 'Test'], loc='upper left')\n",
        "          plt.show()\n",
        "\n",
        "          # Plot training & validation loss values\n",
        "          plt.plot(history.history['loss'])\n",
        "          plt.plot(history.history['val_loss'])\n",
        "          plt.title('Model loss')\n",
        "          plt.ylabel('Loss')\n",
        "          plt.xlabel('Epoch')\n",
        "          plt.legend(['Train', 'Test'], loc='upper left')\n",
        "          plt.show()\n",
        "\n",
        "          return model_classifier\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BoEdQ6PQEgAo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "d6ea594f-5690-4234-fbe6-7e9bd4577fb1"
      },
      "source": [
        "x_train = X_train_augmented\n",
        "x_test = X_dev_original\n",
        "y_train = Y_train_augmented\n",
        "y_test = Y_dev_original\n",
        "x_train = X_train\n",
        "y_train = Y_train\n",
        "\n",
        "#model_classifier1 = cifar10vgg(0.001,x_train,y_train)\n",
        "model_classifier2 = cifar10vgg(0.1,x_train,y_train)\n",
        "#model_classifier3 = cifar10vgg(0.01,x_train,y_train)\n",
        "\n",
        "#predicted_x = model_classifier.predict(x_test)\n",
        "#residuals = np.argmax(predicted_x,1)!=np.argmax(y_test,1)\n",
        "\n",
        "#loss = sum(residuals)/len(residuals)\n",
        "#print(\"the validation 0/1 loss is: \",loss)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_3\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 32, 32, 3)]       0         \n",
            "_________________________________________________________________\n",
            "conv2d_41 (Conv2D)           (None, 32, 32, 64)        1792      \n",
            "_________________________________________________________________\n",
            "batch_normalization_28 (Batc (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "conv2d_42 (Conv2D)           (None, 32, 32, 64)        36928     \n",
            "_________________________________________________________________\n",
            "batch_normalization_29 (Batc (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_10 (MaxPooling (None, 16, 16, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_43 (Conv2D)           (None, 16, 16, 128)       73856     \n",
            "_________________________________________________________________\n",
            "batch_normalization_30 (Batc (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "conv2d_44 (Conv2D)           (None, 16, 16, 128)       147584    \n",
            "_________________________________________________________________\n",
            "batch_normalization_31 (Batc (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_11 (MaxPooling (None, 8, 8, 128)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_45 (Conv2D)           (None, 8, 8, 256)         295168    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_12 (MaxPooling (None, 4, 4, 256)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_46 (Conv2D)           (None, 4, 4, 512)         1180160   \n",
            "_________________________________________________________________\n",
            "average_pooling2d_2 (Average (None, 2, 2, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_54 (Conv2D)           (None, 2, 2, 1024)        525312    \n",
            "_________________________________________________________________\n",
            "flatten_2 (Flatten)          (None, 4096)              0         \n",
            "_________________________________________________________________\n",
            "dense_6 (Dense)              (None, 1024)              4195328   \n",
            "_________________________________________________________________\n",
            "batch_normalization_36 (Batc (None, 1024)              4096      \n",
            "_________________________________________________________________\n",
            "activation_6 (Activation)    (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_7 (Dense)              (None, 1024)              1049600   \n",
            "_________________________________________________________________\n",
            "batch_normalization_37 (Batc (None, 1024)              4096      \n",
            "_________________________________________________________________\n",
            "activation_7 (Activation)    (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_8 (Dense)              (None, 10)                10250     \n",
            "_________________________________________________________________\n",
            "activation_8 (Activation)    (None, 10)                0         \n",
            "=================================================================\n",
            "Total params: 7,525,706\n",
            "Trainable params: 5,784,586\n",
            "Non-trainable params: 1,741,120\n",
            "_________________________________________________________________\n",
            "Epoch 1/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 2.1751 - acc: 0.4382Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 205us/sample - loss: 1.7845 - acc: 0.4838\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 2.1727 - acc: 0.4384 - val_loss: 1.4375 - val_acc: 0.4838\n",
            "Epoch 2/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.6130 - acc: 0.5347Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 218us/sample - loss: 1.3389 - acc: 0.5310\n",
            "332/332 [==============================] - 18s 56ms/step - loss: 1.6128 - acc: 0.5349 - val_loss: 1.3208 - val_acc: 0.5310\n",
            "Epoch 3/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.5127 - acc: 0.5655Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 216us/sample - loss: 1.6444 - acc: 0.3706\n",
            "332/332 [==============================] - 19s 57ms/step - loss: 1.5131 - acc: 0.5651 - val_loss: 1.8700 - val_acc: 0.3706\n",
            "Epoch 4/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.4527 - acc: 0.5815Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 220us/sample - loss: 1.6528 - acc: 0.5524\n",
            "332/332 [==============================] - 19s 56ms/step - loss: 1.4523 - acc: 0.5817 - val_loss: 1.3031 - val_acc: 0.5524\n",
            "Epoch 5/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.4337 - acc: 0.5979Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 231us/sample - loss: 1.9585 - acc: 0.4580\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.4335 - acc: 0.5978 - val_loss: 1.6471 - val_acc: 0.4580\n",
            "Epoch 6/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.3807 - acc: 0.6021Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 236us/sample - loss: 1.4290 - acc: 0.5920\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.3808 - acc: 0.6020 - val_loss: 1.1754 - val_acc: 0.5920\n",
            "Epoch 7/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.3516 - acc: 0.6132Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 243us/sample - loss: 1.4417 - acc: 0.6080\n",
            "332/332 [==============================] - 20s 59ms/step - loss: 1.3507 - acc: 0.6133 - val_loss: 1.1241 - val_acc: 0.6080\n",
            "Epoch 8/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.2781 - acc: 0.6333Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 257us/sample - loss: 1.5366 - acc: 0.5674\n",
            "332/332 [==============================] - 19s 57ms/step - loss: 1.2777 - acc: 0.6335 - val_loss: 1.2716 - val_acc: 0.5674\n",
            "Epoch 9/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.2487 - acc: 0.6424Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 256us/sample - loss: 1.4797 - acc: 0.6044\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.2479 - acc: 0.6425 - val_loss: 1.1719 - val_acc: 0.6044\n",
            "Epoch 10/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.2135 - acc: 0.6495Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 293us/sample - loss: 1.4158 - acc: 0.5190\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.2131 - acc: 0.6495 - val_loss: 1.5937 - val_acc: 0.5190\n",
            "Epoch 11/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.1868 - acc: 0.6586Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 267us/sample - loss: 1.3137 - acc: 0.6164\n",
            "332/332 [==============================] - 19s 57ms/step - loss: 1.1874 - acc: 0.6584 - val_loss: 1.0922 - val_acc: 0.6164\n",
            "Epoch 12/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.1768 - acc: 0.6606Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 304us/sample - loss: 1.0067 - acc: 0.6250\n",
            "332/332 [==============================] - 19s 57ms/step - loss: 1.1766 - acc: 0.6607 - val_loss: 1.0914 - val_acc: 0.6250\n",
            "Epoch 13/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.1444 - acc: 0.6681Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 277us/sample - loss: 1.2382 - acc: 0.6390\n",
            "332/332 [==============================] - 19s 57ms/step - loss: 1.1445 - acc: 0.6681 - val_loss: 1.0760 - val_acc: 0.6390\n",
            "Epoch 14/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.1071 - acc: 0.6806Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 292us/sample - loss: 2.3324 - acc: 0.4190\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.1167 - acc: 0.6803 - val_loss: 2.1229 - val_acc: 0.4190\n",
            "Epoch 15/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.1911 - acc: 0.6590Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 324us/sample - loss: 1.3273 - acc: 0.6106\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.1906 - acc: 0.6592 - val_loss: 1.1363 - val_acc: 0.6106\n",
            "Epoch 16/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.1224 - acc: 0.6766Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 1s 298us/sample - loss: 1.0796 - acc: 0.6104\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.1221 - acc: 0.6767 - val_loss: 1.1742 - val_acc: 0.6104\n",
            "Epoch 17/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.0851 - acc: 0.6899Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 301us/sample - loss: 1.0632 - acc: 0.6420\n",
            "332/332 [==============================] - 19s 59ms/step - loss: 1.0860 - acc: 0.6895 - val_loss: 1.0131 - val_acc: 0.6420\n",
            "Epoch 18/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.0950 - acc: 0.6849Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 306us/sample - loss: 1.2998 - acc: 0.6178\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.0956 - acc: 0.6847 - val_loss: 1.1323 - val_acc: 0.6178\n",
            "Epoch 19/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.0559 - acc: 0.6957Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 305us/sample - loss: 1.4504 - acc: 0.6330\n",
            "332/332 [==============================] - 19s 57ms/step - loss: 1.0559 - acc: 0.6958 - val_loss: 1.0963 - val_acc: 0.6330\n",
            "Epoch 20/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.0548 - acc: 0.7003Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 313us/sample - loss: 1.3599 - acc: 0.5692\n",
            "332/332 [==============================] - 19s 58ms/step - loss: 1.0547 - acc: 0.7004 - val_loss: 1.3017 - val_acc: 0.5692\n",
            "Epoch 21/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 1.0279 - acc: 0.7020Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 360us/sample - loss: 1.2180 - acc: 0.6268\n",
            "332/332 [==============================] - 19s 59ms/step - loss: 1.0291 - acc: 0.7019 - val_loss: 1.1241 - val_acc: 0.6268\n",
            "Epoch 22/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 1.0053 - acc: 0.7095Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 335us/sample - loss: 1.2316 - acc: 0.5564\n",
            "332/332 [==============================] - 20s 59ms/step - loss: 1.0060 - acc: 0.7093 - val_loss: 1.3341 - val_acc: 0.5564\n",
            "Epoch 23/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9926 - acc: 0.7126Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 327us/sample - loss: 1.1893 - acc: 0.6428\n",
            "332/332 [==============================] - 20s 60ms/step - loss: 0.9929 - acc: 0.7124 - val_loss: 1.0684 - val_acc: 0.6428\n",
            "Epoch 24/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9732 - acc: 0.7188Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 339us/sample - loss: 1.3520 - acc: 0.6434\n",
            "332/332 [==============================] - 20s 59ms/step - loss: 0.9730 - acc: 0.7190 - val_loss: 1.1412 - val_acc: 0.6434\n",
            "Epoch 25/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9494 - acc: 0.7271Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 394us/sample - loss: 0.8794 - acc: 0.6388\n",
            "332/332 [==============================] - 20s 60ms/step - loss: 0.9496 - acc: 0.7269 - val_loss: 1.0792 - val_acc: 0.6388\n",
            "Epoch 26/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9332 - acc: 0.7299Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 353us/sample - loss: 1.0043 - acc: 0.6562\n",
            "332/332 [==============================] - 20s 59ms/step - loss: 0.9324 - acc: 0.7301 - val_loss: 1.0191 - val_acc: 0.6562\n",
            "Epoch 27/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9674 - acc: 0.7238Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 351us/sample - loss: 1.2004 - acc: 0.6462\n",
            "332/332 [==============================] - 20s 59ms/step - loss: 0.9677 - acc: 0.7238 - val_loss: 1.0826 - val_acc: 0.6462\n",
            "Epoch 28/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9217 - acc: 0.7329Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 363us/sample - loss: 1.6186 - acc: 0.5312\n",
            "332/332 [==============================] - 20s 60ms/step - loss: 0.9222 - acc: 0.7327 - val_loss: 1.5329 - val_acc: 0.5312\n",
            "Epoch 29/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9478 - acc: 0.7255Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 403us/sample - loss: 0.9893 - acc: 0.6488\n",
            "332/332 [==============================] - 20s 60ms/step - loss: 0.9481 - acc: 0.7255 - val_loss: 1.0797 - val_acc: 0.6488\n",
            "Epoch 30/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8892 - acc: 0.7415Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 423us/sample - loss: 1.9714 - acc: 0.5666\n",
            "332/332 [==============================] - 20s 60ms/step - loss: 0.8892 - acc: 0.7416 - val_loss: 1.6363 - val_acc: 0.5666\n",
            "Epoch 31/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8692 - acc: 0.7457Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 399us/sample - loss: 1.0818 - acc: 0.6640\n",
            "332/332 [==============================] - 20s 61ms/step - loss: 0.8695 - acc: 0.7457 - val_loss: 1.0173 - val_acc: 0.6640\n",
            "Epoch 32/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9515 - acc: 0.7293Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 380us/sample - loss: 1.0966 - acc: 0.6624\n",
            "332/332 [==============================] - 20s 60ms/step - loss: 0.9513 - acc: 0.7293 - val_loss: 1.0546 - val_acc: 0.6624\n",
            "Epoch 33/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8707 - acc: 0.7490Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 387us/sample - loss: 1.2100 - acc: 0.6568\n",
            "332/332 [==============================] - 20s 61ms/step - loss: 0.8708 - acc: 0.7490 - val_loss: 1.0826 - val_acc: 0.6568\n",
            "Epoch 34/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8468 - acc: 0.7516Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 406us/sample - loss: 1.0546 - acc: 0.6382\n",
            "332/332 [==============================] - 20s 61ms/step - loss: 0.8468 - acc: 0.7516 - val_loss: 1.0937 - val_acc: 0.6382\n",
            "Epoch 35/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.9381 - acc: 0.7297Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 464us/sample - loss: 1.3731 - acc: 0.6494\n",
            "332/332 [==============================] - 21s 62ms/step - loss: 0.9380 - acc: 0.7298 - val_loss: 1.1478 - val_acc: 0.6494\n",
            "Epoch 36/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 0.8398 - acc: 0.7561Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 460us/sample - loss: 1.9125 - acc: 0.6072\n",
            "332/332 [==============================] - 21s 63ms/step - loss: 0.8412 - acc: 0.7557 - val_loss: 1.4539 - val_acc: 0.6072\n",
            "Epoch 37/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8517 - acc: 0.7526Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 477us/sample - loss: 1.3835 - acc: 0.6514\n",
            "332/332 [==============================] - 21s 62ms/step - loss: 0.8513 - acc: 0.7526 - val_loss: 1.1004 - val_acc: 0.6514\n",
            "Epoch 38/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8394 - acc: 0.7530Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 467us/sample - loss: 1.1291 - acc: 0.6658\n",
            "332/332 [==============================] - 22s 66ms/step - loss: 0.8394 - acc: 0.7530 - val_loss: 1.0976 - val_acc: 0.6658\n",
            "Epoch 39/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8056 - acc: 0.7646Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 469us/sample - loss: 1.2220 - acc: 0.6552\n",
            "332/332 [==============================] - 22s 66ms/step - loss: 0.8061 - acc: 0.7645 - val_loss: 1.1403 - val_acc: 0.6552\n",
            "Epoch 40/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.7867 - acc: 0.7696Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 475us/sample - loss: 1.3086 - acc: 0.6618\n",
            "332/332 [==============================] - 22s 66ms/step - loss: 0.7878 - acc: 0.7693 - val_loss: 1.1305 - val_acc: 0.6618\n",
            "Epoch 41/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.7940 - acc: 0.7683Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 481us/sample - loss: 1.1101 - acc: 0.6644\n",
            "332/332 [==============================] - 22s 67ms/step - loss: 0.7937 - acc: 0.7683 - val_loss: 1.0816 - val_acc: 0.6644\n",
            "Epoch 42/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.7458 - acc: 0.7819Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 491us/sample - loss: 1.3203 - acc: 0.6542\n",
            "332/332 [==============================] - 22s 68ms/step - loss: 0.7457 - acc: 0.7819 - val_loss: 1.2369 - val_acc: 0.6542\n",
            "Epoch 43/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.7790 - acc: 0.7764Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 2s 495us/sample - loss: 1.4190 - acc: 0.6330\n",
            "332/332 [==============================] - 22s 67ms/step - loss: 0.7797 - acc: 0.7763 - val_loss: 1.2628 - val_acc: 0.6330\n",
            "Epoch 44/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8095 - acc: 0.7660Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 3s 505us/sample - loss: 1.5838 - acc: 0.6386\n",
            "332/332 [==============================] - 22s 67ms/step - loss: 0.8093 - acc: 0.7660 - val_loss: 1.2673 - val_acc: 0.6386\n",
            "Epoch 45/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.8004 - acc: 0.7662Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 3s 516us/sample - loss: 1.8308 - acc: 0.6484\n",
            "332/332 [==============================] - 23s 68ms/step - loss: 0.8003 - acc: 0.7662 - val_loss: 1.1711 - val_acc: 0.6484\n",
            "Epoch 46/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.7883 - acc: 0.7730Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 3s 512us/sample - loss: 1.3450 - acc: 0.6696\n",
            "332/332 [==============================] - 23s 68ms/step - loss: 0.7883 - acc: 0.7730 - val_loss: 1.1315 - val_acc: 0.6696\n",
            "Epoch 47/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 0.7691 - acc: 0.7760Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 3s 530us/sample - loss: 1.3088 - acc: 0.6630\n",
            "332/332 [==============================] - 22s 66ms/step - loss: 0.7684 - acc: 0.7761 - val_loss: 1.1650 - val_acc: 0.6630\n",
            "Epoch 48/50\n",
            "330/332 [============================>.] - ETA: 0s - loss: 0.7372 - acc: 0.7858Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 3s 512us/sample - loss: 1.2043 - acc: 0.6658\n",
            "332/332 [==============================] - 22s 66ms/step - loss: 0.7375 - acc: 0.7855 - val_loss: 1.1253 - val_acc: 0.6658\n",
            "Epoch 49/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.7319 - acc: 0.7848Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 3s 511us/sample - loss: 1.6977 - acc: 0.6456\n",
            "332/332 [==============================] - 22s 66ms/step - loss: 0.7313 - acc: 0.7850 - val_loss: 1.2412 - val_acc: 0.6456\n",
            "Epoch 50/50\n",
            "331/332 [============================>.] - ETA: 0s - loss: 0.6981 - acc: 0.7952Epoch 1/50\n",
            "5000/332 [===================================================================================================================================================================================================================================================================================================================================================================================================================================================================] - 3s 510us/sample - loss: 1.5828 - acc: 0.6522\n",
            "332/332 [==============================] - 22s 66ms/step - loss: 0.6981 - acc: 0.7952 - val_loss: 1.2428 - val_acc: 0.6522\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0tc89NG-EyRb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}