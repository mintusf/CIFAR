{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mintusf/CIFAR/blob/master/Encoder_1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r0z41wL5ACnZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yp4unqX2vRuP",
        "colab_type": "code",
        "outputId": "a1808612-0c9f-4f5d-8b78-7f5cfe308814",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "!pip install -U -q PyDrive\n",
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "# Authenticate and create the PyDrive client.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)\n",
        "link = 'https://drive.google.com/open?id=19b0kUvuPGl6U4Cj4VgTfYTc7gK5VgA09'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_X')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1ejj9Qt4Ah9IOSmKnM87-oGe-IytAxM2F'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_Y')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1KzllioQ321D7zAHlmasN-tagGcE6pCnC'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_X')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1m3E519AgJkPbsTNGvEwSHCN6otXNB1Y0'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_Y')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=10mFBsqasbIcrbLrWqqkMyw41OczlcYID'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_X')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1r3zB1bwH6ZjrLZjQftaqHAr-9wGra3Uj'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_Y')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1B3YZrKYnxvAQmC-I6i8vm998qP5izhbA'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_X_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1mxKxn8s1qMCoX9mvBAd-0wCUKQUSVZ2p'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Dev_Y_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1z2TFC3cFLsN7qQcg86ILb2Gv4lXUM19m'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_X_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1TL3GJFCvwxwK5DqqZhTveb_jKmPS0AiK'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Test_Y_original')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=1Fa_uK2z1fpL6GyRosGQvtFx5eYjz7IdJ'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_X_augmented')\n",
        "\n",
        "link = 'https://drive.google.com/open?id=170pj5QRqB4RlxakUaZZ5PXjD1cAu_ItV'\n",
        "fluff, id = link.split('=')\n",
        "print (id) # Verify that you have everything after '='\n",
        "downloaded = drive.CreateFile({'id':id}) \n",
        "downloaded.GetContentFile('Train_Y_augmented')\n",
        "X_train = np.load('Train_X')/255.\n",
        "Y_train_1d = np.load('Train_Y')\n",
        "X_dev = np.load('Dev_X')/255.\n",
        "Y_dev_1d = np.load('Dev_Y')\n",
        "X_test = np.load('Test_X')/255.\n",
        "Y_test_1d = np.load('Test_Y')\n",
        "X_dev_original = np.load('Dev_X_original')/255.\n",
        "Y_dev_original_1d = np.load('Dev_Y_original')\n",
        "X_test_original = np.load('Test_X_original')/255.\n",
        "Y_test_original_1d = np.load('Test_Y_original')\n",
        "X_train_augmented = np.load('Train_X_augmented')/255.\n",
        "Y_train_augmented_1d = np.load('Train_Y_augmented')\n",
        "(X_train_original, Y_train_original), _ = cifar10.load_data()\n",
        "X_train_original = X_train_original/255."
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<p style=\"color: red;\">\n",
              "The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n",
              "We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n",
              "or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n",
              "<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "19b0kUvuPGl6U4Cj4VgTfYTc7gK5VgA09\n",
            "1ejj9Qt4Ah9IOSmKnM87-oGe-IytAxM2F\n",
            "1KzllioQ321D7zAHlmasN-tagGcE6pCnC\n",
            "1m3E519AgJkPbsTNGvEwSHCN6otXNB1Y0\n",
            "10mFBsqasbIcrbLrWqqkMyw41OczlcYID\n",
            "1r3zB1bwH6ZjrLZjQftaqHAr-9wGra3Uj\n",
            "1B3YZrKYnxvAQmC-I6i8vm998qP5izhbA\n",
            "1mxKxn8s1qMCoX9mvBAd-0wCUKQUSVZ2p\n",
            "1z2TFC3cFLsN7qQcg86ILb2Gv4lXUM19m\n",
            "1TL3GJFCvwxwK5DqqZhTveb_jKmPS0AiK\n",
            "1Fa_uK2z1fpL6GyRosGQvtFx5eYjz7IdJ\n",
            "170pj5QRqB4RlxakUaZZ5PXjD1cAu_ItV\n",
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170500096/170498071 [==============================] - 11s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "eea94777-b33d-4945-b404-0ce39fbd65a2",
        "id": "ex_Q0H_pAIy4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        }
      },
      "source": [
        "X_train = np.load('Train_X')/255.\n",
        "Y_train_1d = np.load('Train_Y')\n",
        "X_dev = np.load('Dev_X')/255.\n",
        "Y_dev_1d = np.load('Dev_Y')\n",
        "X_test = np.load('Test_X')/255.\n",
        "Y_test_1d = np.load('Test_Y')\n",
        "X_dev_original = np.load('Dev_X_original')/255.\n",
        "Y_dev_original_1d = np.load('Dev_Y_original')\n",
        "X_test_original = np.load('Test_X_original')/255.\n",
        "Y_test_original_1d = np.load('Test_Y_original')\n",
        "X_train_augmented = np.load('Train_X_augmented')/255.\n",
        "Y_train_augmented_1d = np.load('Train_Y_augmented')\n",
        "(X_train_original, Y_train_original), _ = cifar10.load_data()\n",
        "X_train_original = X_train_original/255.\n",
        "Y_train = np.eye(10)[Y_train_1d.reshape(-1)]\n",
        "print(Y_train.shape)\n",
        "Y_dev = np.eye(10)[Y_dev_1d.reshape(-1)]\n",
        "print(Y_dev.shape)\n",
        "Y_dev_original = np.eye(10)[Y_dev_original_1d.reshape(-1)]\n",
        "print(Y_dev_original.shape)\n",
        "Y_train_augmented = np.eye(10)[Y_train_augmented_1d.reshape(-1)]\n",
        "print(Y_train_augmented.shape)\n",
        "Y_train_original = np.eye(10)[Y_train_original.reshape(-1)]\n",
        "print(Y_train_original.shape)\n",
        "from tensorflow.keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, Dropout,UpSampling2D\n",
        "from tensorflow.keras.models import Model, load_model\n",
        "from tensorflow.keras import regularizers\n",
        "from tensorflow.keras.initializers import glorot_uniform\n",
        "from tensorflow.keras.utils import plot_model\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(42500, 10)\n",
            "(8750, 10)\n",
            "(5000, 10)\n",
            "(50000, 10)\n",
            "(50000, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NzCrrdZjAeo7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def Autoencoder (input_img):\n",
        "\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = MaxPooling2D((2,2))(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = MaxPooling2D((2, 2), padding='same')(x)\n",
        "    x = Conv2D(256, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = MaxPooling2D((2, 2), padding='same')(x)\n",
        "    x = Conv2D(512, (3, 3), activation='relu', padding='same')(x)\n",
        "    encoded = AveragePooling2D((2, 2))(x)\n",
        "\n",
        "    # at this point the representation is (4, 4, 8) i.e. 128-dimensional\n",
        "    x = UpSampling2D((2,2))(encoded)\n",
        "    x = Conv2D(512, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = UpSampling2D((2, 2))(x)\n",
        "    x = Conv2D(256, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = UpSampling2D((2, 2))(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = UpSampling2D((2,2))(x)\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\n",
        "    x = BatchNormalization()(x)\n",
        "    decoded = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)\n",
        "\n",
        "    return (encoded, decoded)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r8Awu_E-AgXP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b6cfcbe3-febb-4803-e643-650b62efb9cb"
      },
      "source": [
        "\n",
        "with tf.device('/device:GPU:0'):\n",
        "\n",
        "\n",
        "  input_img = Input(shape = (32,32,3))\n",
        "  model_autoenc = Model(input_img,Autoencoder(input_img)[1])\n",
        "\n",
        "\n",
        "  Adam = tf.keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)\n",
        "  model_autoenc.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\n",
        "\n",
        "  model_autoenc.summary()\n",
        "  history = model_autoenc.fit(X_train, X_train, validation_data=(X_dev_original, X_dev_original), epochs = 20, batch_size = 128)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "  plt.plot(history.history['acc'])\n",
        "  plt.plot(history.history['val_acc'])\n",
        "  plt.title('Model accuracy')\n",
        "  plt.ylabel('Accuracy')\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.legend(['Train', 'Test'], loc='upper left')\n",
        "  plt.show()\n",
        "\n",
        "  # Plot training & validation loss values\n",
        "  plt.plot(history.history['loss'])\n",
        "  plt.plot(history.history['val_loss'])\n",
        "  plt.title('Model loss')\n",
        "  plt.ylabel('Loss')\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.legend(['Train', 'Test'], loc='upper left')\n",
        "  plt.show()\n",
        "\n",
        "  \"\"\"\n",
        "  for i in idx:\n",
        "      step1 = data[i,:].reshape(3,32,32)\n",
        "      step2 = np.transpose(step1,axes = (1,2,0))\n",
        "      plt.imshow(step2)\n",
        "      plt.show()\n",
        "      print(names[labels[i]])\n",
        "  \"\"\"\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "If using Keras pass *_constraint arguments to layers.\n",
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 32, 32, 3)]       0         \n",
            "_________________________________________________________________\n",
            "conv2d (Conv2D)              (None, 32, 32, 64)        1792      \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 32, 32, 64)        36928     \n",
            "_________________________________________________________________\n",
            "batch_normalization_1 (Batch (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 16, 16, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 16, 16, 128)       73856     \n",
            "_________________________________________________________________\n",
            "batch_normalization_2 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 16, 16, 128)       147584    \n",
            "_________________________________________________________________\n",
            "batch_normalization_3 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 8, 8, 128)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 8, 8, 256)         295168    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 4, 4, 256)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_5 (Conv2D)            (None, 4, 4, 512)         1180160   \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 2, 2, 512)         0         \n",
            "_________________________________________________________________\n",
            "up_sampling2d (UpSampling2D) (None, 4, 4, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_6 (Conv2D)            (None, 4, 4, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "up_sampling2d_1 (UpSampling2 (None, 8, 8, 512)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_7 (Conv2D)            (None, 8, 8, 256)         1179904   \n",
            "_________________________________________________________________\n",
            "up_sampling2d_2 (UpSampling2 (None, 16, 16, 256)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_8 (Conv2D)            (None, 16, 16, 128)       295040    \n",
            "_________________________________________________________________\n",
            "batch_normalization_4 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "conv2d_9 (Conv2D)            (None, 16, 16, 128)       147584    \n",
            "_________________________________________________________________\n",
            "batch_normalization_5 (Batch (None, 16, 16, 128)       512       \n",
            "_________________________________________________________________\n",
            "up_sampling2d_3 (UpSampling2 (None, 32, 32, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_10 (Conv2D)           (None, 32, 32, 64)        73792     \n",
            "_________________________________________________________________\n",
            "batch_normalization_6 (Batch (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "conv2d_11 (Conv2D)           (None, 32, 32, 64)        36928     \n",
            "_________________________________________________________________\n",
            "batch_normalization_7 (Batch (None, 32, 32, 64)        256       \n",
            "_________________________________________________________________\n",
            "conv2d_12 (Conv2D)           (None, 32, 32, 3)         1731      \n",
            "=================================================================\n",
            "Total params: 5,833,347\n",
            "Trainable params: 5,831,811\n",
            "Non-trainable params: 1,536\n",
            "_________________________________________________________________\n",
            "Train on 42500 samples, validate on 5000 samples\n",
            "Epoch 1/20\n",
            "42500/42500 [==============================] - 23s 553us/sample - loss: 0.0217 - acc: 0.5794 - val_loss: 0.0527 - val_acc: 0.2318\n",
            "Epoch 2/20\n",
            "42500/42500 [==============================] - 19s 452us/sample - loss: 0.0108 - acc: 0.6896 - val_loss: 0.0177 - val_acc: 0.6302\n",
            "Epoch 3/20\n",
            "42500/42500 [==============================] - 19s 452us/sample - loss: 0.0085 - acc: 0.7165 - val_loss: 0.0119 - val_acc: 0.6894\n",
            "Epoch 4/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0070 - acc: 0.7342 - val_loss: 0.0173 - val_acc: 0.6425\n",
            "Epoch 5/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0061 - acc: 0.7440 - val_loss: 0.0117 - val_acc: 0.7387\n",
            "Epoch 6/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0053 - acc: 0.7522 - val_loss: 0.0157 - val_acc: 0.5417\n",
            "Epoch 7/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0048 - acc: 0.7587 - val_loss: 0.0102 - val_acc: 0.6779\n",
            "Epoch 8/20\n",
            "42500/42500 [==============================] - 19s 449us/sample - loss: 0.0045 - acc: 0.7638 - val_loss: 0.0164 - val_acc: 0.5801\n",
            "Epoch 9/20\n",
            "42500/42500 [==============================] - 19s 451us/sample - loss: 0.0043 - acc: 0.7668 - val_loss: 0.0110 - val_acc: 0.7372\n",
            "Epoch 10/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0040 - acc: 0.7703 - val_loss: 0.0346 - val_acc: 0.4980\n",
            "Epoch 11/20\n",
            "42500/42500 [==============================] - 19s 452us/sample - loss: 0.0039 - acc: 0.7720 - val_loss: 0.0118 - val_acc: 0.6848\n",
            "Epoch 12/20\n",
            "42500/42500 [==============================] - 19s 455us/sample - loss: 0.0036 - acc: 0.7774 - val_loss: 0.0105 - val_acc: 0.6868\n",
            "Epoch 13/20\n",
            "42500/42500 [==============================] - 19s 454us/sample - loss: 0.0035 - acc: 0.7784 - val_loss: 0.0105 - val_acc: 0.6735\n",
            "Epoch 14/20\n",
            "42500/42500 [==============================] - 19s 454us/sample - loss: 0.0034 - acc: 0.7803 - val_loss: 0.0081 - val_acc: 0.6454\n",
            "Epoch 15/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0032 - acc: 0.7852 - val_loss: 0.0072 - val_acc: 0.7704\n",
            "Epoch 16/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0031 - acc: 0.7880 - val_loss: 0.0259 - val_acc: 0.6294\n",
            "Epoch 17/20\n",
            "42500/42500 [==============================] - 19s 449us/sample - loss: 0.0034 - acc: 0.7816 - val_loss: 0.0122 - val_acc: 0.6493\n",
            "Epoch 18/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0030 - acc: 0.7875 - val_loss: 0.0123 - val_acc: 0.7425\n",
            "Epoch 19/20\n",
            "42500/42500 [==============================] - 19s 450us/sample - loss: 0.0029 - acc: 0.7866 - val_loss: 0.0084 - val_acc: 0.6255\n",
            "Epoch 20/20\n",
            "42500/42500 [==============================] - 19s 448us/sample - loss: 0.0027 - acc: 0.7936 - val_loss: 0.0070 - val_acc: 0.7749\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N_Zm4PpKAnc0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "outputId": "48d2cd60-22b5-4975-9c25-6700f3d990db"
      },
      "source": [
        "#model_autoenc.save_weights('autoencoder.h5')\n",
        "#model_autoenc.get_weights()[0][1][1]\n",
        "decoded = model_autoenc.predict(np.reshape(X_test[5],(-1,32,32,3)))\n",
        "plt.imshow(X_test[5])\n",
        "plt.show()\n",
        "plt.imshow(decoded[0])"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f4d460c6b38>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v1QOISGnEXJC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from __future__ import print_function\n",
        "with tf.device('/device:GPU:0'):\n",
        "  \n",
        "  from tensorflow.keras.datasets import cifar10\n",
        "  from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "  from tensorflow.keras.models import Sequential\n",
        "  from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\n",
        "  from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n",
        "  from tensorflow.keras import optimizers\n",
        "  import numpy as np\n",
        "  #from tensorflow.keras.layers.core import Lambda\n",
        "  from tensorflow.keras import backend as K\n",
        "  from tensorflow.keras import regularizers\n",
        "\n",
        "  class cifar10vgg:\n",
        "      def __init__(self,learning_rate,x_train,y_train,train=True):\n",
        "          self.num_classes = 10\n",
        "          self.weight_decay = 0.0005\n",
        "          self.x_shape = [32,32,3]\n",
        "          encoded = Autoencoder(input_img)[0] #using encoder\n",
        "          self.model = Model(input_img,self.build_model(encoded))\n",
        "          for l1,l2 in zip(self.model.layers[:15],model_autoenc.layers[:15]):#getting weights from encoder\n",
        "            l1.set_weights(l2.get_weights())\n",
        "          #print(model_autoenc.get_weights()[0][1][1])\n",
        "          #print(self.model.get_weights()[0][1][1])\n",
        "          for layer in self.model.layers[0:15]:\n",
        "            layer.trainable = False\n",
        "          if train:\n",
        "              self.model.summary()\n",
        "              self.model = self.train(self.model,learning_rate,x_train,y_train)\n",
        "          else:\n",
        "              self.model.load_weights('cifar10vgg.h5')\n",
        "\n",
        "\n",
        "      def build_model(self,encoded):\n",
        "          # Build the network of vgg for 10 classes with massive dropout and weight decay as described in the paper.\n",
        "\n",
        "          weight_decay = self.weight_decay\n",
        "\n",
        "          #X = Conv2D(64, (3, 3), padding='same',\n",
        "          #                input_shape=self.x_shape,kernel_regularizer=regularizers.l2(weight_decay))(encoded)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = Conv2D(64, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "          #X = Conv2D(128, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)  \n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = Conv2D(128, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.2)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "          #X = Conv2D(256, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)      \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(256, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)    \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = MaxPooling2D(pool_size=(2, 2))(X)\n",
        "\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)     \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)     \n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          #X = Conv2D(512, (3, 3), padding='same',kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          #X = BatchNormalization()(X)\n",
        "          #X = Activation('relu')(X)\n",
        "          #X = Dropout(0.3)(X)\n",
        "\n",
        "          X = Conv2D(1024,(1,1),padding = 'same',kernel_regularizer=regularizers.l2(weight_decay))(encoded)\n",
        "          #X = Dropout(0.4)(X)\n",
        "          \n",
        "          X = Flatten()(X)\n",
        "          X = Dense(1024,kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          X = BatchNormalization()(X)\n",
        "          X = Activation('relu')(X)  \n",
        "          #X = Dropout(0.4)(X)\n",
        "\n",
        "          X = Dense(1024,kernel_regularizer=regularizers.l2(weight_decay))(X)\n",
        "          X = BatchNormalization()(X)\n",
        "          X = Activation('relu')(X)  \n",
        "          #X = Dropout(0.4)(X)\n",
        "\n",
        "          X = Dense(self.num_classes)(X)\n",
        "          X = Activation('softmax')(X)\n",
        "          \n",
        "          return X\n",
        "\n",
        "\n",
        "      def normalize(self,X_train,X_test):\n",
        "          #this function normalize inputs for zero mean and unit variance\n",
        "          # it is used when training a model.\n",
        "          # Input: training set and test set\n",
        "          # Output: normalized training set and test set according to the trianing set statistics.\n",
        "          mean = np.mean(X_train,axis=(0,1,2,3))\n",
        "          std = np.std(X_train, axis=(0, 1, 2, 3))\n",
        "          X_train = (X_train-mean)/(std+1e-7)\n",
        "          X_test = (X_test-mean)/(std+1e-7)\n",
        "          return X_train, X_test\n",
        "\n",
        "      def normalize_production(self,x):\n",
        "          #this function is used to normalize instances in production according to saved training set statistics\n",
        "          # Input: X - a training set\n",
        "          # Output X - a normalized training set according to normalization constants.\n",
        "\n",
        "          #these values produced during first training and are general for the standard cifar10 training set normalization\n",
        "          mean = 120.707\n",
        "          std = 64.15\n",
        "          return (x-mean)/(std+1e-7)\n",
        "          \n",
        "\n",
        "      def predict(self,x,normalize=True,batch_size=50):\n",
        "          if normalize:\n",
        "              x = self.normalize_production(x)\n",
        "          return self.model.predict(x,batch_size)\n",
        "\n",
        "      def train(self,model_classifier,learning_rate,x_train,y_train):\n",
        "\n",
        "          #training parameters\n",
        "          batch_size = 128\n",
        "          maxepoches = 50\n",
        "          learning_rate = learning_rate\n",
        "          lr_decay = 1e-5\n",
        "          lr_decay = 1e-5\n",
        "          lr_drop = 20\n",
        "          # The data, shuffled and split between train and test sets:\n",
        "          #(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n",
        "          #x_train = x_train.astype('float32')\n",
        "          #x_test = x_test.astype('float32')\n",
        "          #x_train, x_test = self.normalize(x_train, x_test)\n",
        "\n",
        "          #y_train = tf.keras.utils.to_categorical(y_train, self.num_classes)\n",
        "          #y_test = tf.keras.utils.to_categorical(y_test, self.num_classes)\n",
        "\n",
        "          def lr_scheduler(epoch):\n",
        "              return learning_rate * (0.5 ** (epoch // lr_drop))\n",
        "          reduce_lr = tf.keras.callbacks.LearningRateScheduler(lr_scheduler)\n",
        "\n",
        "          #data augmentation\n",
        "          datagen = ImageDataGenerator(\n",
        "              featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "              samplewise_center=False,  # set each sample mean to 0\n",
        "              featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "              samplewise_std_normalization=False,  # divide each input by its std\n",
        "              zca_whitening=False,  # apply ZCA whitening\n",
        "              rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "              width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n",
        "              height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n",
        "              zoom_range=0.1,\n",
        "              shear_range=0.1,\n",
        "              horizontal_flip=True,  # randomly flip images\n",
        "              vertical_flip=False)  # randomly flip images\n",
        "          # (std, mean, and principal components if ZCA whitening is applied).\n",
        "          datagen.fit(x_train)\n",
        "\n",
        "\n",
        "\n",
        "          #optimization details\n",
        "          sgd = optimizers.SGD(lr=learning_rate, decay=lr_decay, momentum=0.9, nesterov=True)\n",
        "\n",
        "          mask = np.array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])\n",
        "          mask = np.reshape(mask,(10,1))\n",
        "          def customLoss(yTrue,yPred):\n",
        "            print(yTrue.shape)\n",
        "            return K.categorical_crossentropy(mask*yTrue, yPred, from_logits=False, axis=-1)\n",
        "          #model.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])\n",
        "          model_classifier.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])\n",
        "\n",
        "          # training process in a for loop with learning rate drop every 25 epoches.\n",
        "\n",
        "          class_weight = {0: 1.,1: 1.,2: 2.,3: 2.,4: 2.,5: 1.,6: 1.,7: 1.,8: 1.,9: 1.}\n",
        "\n",
        "          history = model_classifier.fit_generator(datagen.flow(x_train, y_train,\n",
        "                                          batch_size=batch_size),\n",
        "                              steps_per_epoch=x_train.shape[0] // batch_size,\n",
        "                              epochs=maxepoches,\n",
        "                              validation_data=(x_test, y_test),verbose=1,class_weight = class_weight)\n",
        "          \n",
        "          #history = model_classifier.fit(x_train,y_train, batch_size=batch_size,epochs=maxepoches,validation_data=(x_test, y_test),verbose=1,class_weight = class_weight)\n",
        "\n",
        "          model_classifier.save_weights('cifar10vgg.h5')\n",
        "          \n",
        "          plt.plot(history.history['acc'])\n",
        "          plt.plot(history.history['val_acc'])\n",
        "          plt.title('Model accuracy')\n",
        "          plt.ylabel('Accuracy')\n",
        "          plt.xlabel('Epoch')\n",
        "          plt.legend(['Train', 'Test'], loc='upper left')\n",
        "          plt.show()\n",
        "\n",
        "          # Plot training & validation loss values\n",
        "          plt.plot(history.history['loss'])\n",
        "          plt.plot(history.history['val_loss'])\n",
        "          plt.title('Model loss')\n",
        "          plt.ylabel('Loss')\n",
        "          plt.xlabel('Epoch')\n",
        "          plt.legend(['Train', 'Test'], loc='upper left')\n",
        "          plt.show()\n",
        "\n",
        "          return model_classifier\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BoEdQ6PQEgAo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 229
        },
        "outputId": "3e7a4253-7c29-423f-8126-119fb363a58d"
      },
      "source": [
        "x_train = X_train_augmented\n",
        "x_test = X_dev_original\n",
        "y_train = Y_train_augmented\n",
        "y_test = Y_dev_original\n",
        "x_train = X_train\n",
        "y_train = Y_train\n",
        "\n",
        "#model_classifier1 = cifar10vgg(0.001,x_train,y_train)\n",
        "model_classifier2 = cifar10vgg(0.1,x_train,y_train)\n",
        "#model_classifier3 = cifar10vgg(0.01,x_train,y_train)\n",
        "\n",
        "#predicted_x = model_classifier.predict(x_test)\n",
        "#residuals = np.argmax(predicted_x,1)!=np.argmax(y_test,1)\n",
        "\n",
        "#loss = sum(residuals)/len(residuals)\n",
        "#print(\"the validation 0/1 loss is: \",loss)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-74920ee38b4a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train_augmented\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mx_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_dev_original\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mY_train_augmented\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mY_dev_original\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mx_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'X_train_augmented' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0tc89NG-EyRb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}